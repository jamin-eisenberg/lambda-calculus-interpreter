;; Prelude

(define 0 (\ f x x))
(define add1 (\ n f x (f (n f x))))

(define 1 (add1 0))
(define 2 (add1 1))
(define 3 (add1 2))
(define 4 (add1 3))
(define 5 (add1 4))
(define 6 (add1 5))
(define 7 (add1 6))
(define 8 (add1 7))
(define 9 (add1 8))
(define 10 (add1 9))
(define 11 (add1 10))
(define 12 (add1 11))
(define 13 (add1 12))
(define 14 (add1 13))
(define 15 (add1 14))
(define 16 (add1 15))
(define 17 (add1 16))
(define 18 (add1 17))
(define 19 (add1 18))
(define 20 (add1 19))
(define 21 (add1 20))
(define 22 (add1 21))
(define 23 (add1 22))
(define 24 (add1 23))
(define 25 (add1 24))
(define 26 (add1 25))
(define 27 (add1 26))
(define 28 (add1 27))
(define 29 (add1 28))
(define 30 (add1 29))
(define 31 (add1 30))
(define 32 (add1 31))
(define 33 (add1 32))
(define 34 (add1 33))
(define 35 (add1 34))
(define 36 (add1 35))
(define 37 (add1 36))
(define 38 (add1 37))
(define 39 (add1 38))
(define 40 (add1 39))
(define 41 (add1 40))
(define 42 (add1 41))
(define 43 (add1 42))
(define 44 (add1 43))
(define 45 (add1 44))
(define 46 (add1 45))
(define 47 (add1 46))
(define 48 (add1 47))
(define 49 (add1 48))
(define 50 (add1 49))
(define 51 (add1 50))
(define 52 (add1 51))
(define 53 (add1 52))
(define 54 (add1 53))
(define 55 (add1 54))
(define 56 (add1 55))
(define 57 (add1 56))
(define 58 (add1 57))
(define 59 (add1 58))
(define 60 (add1 59))
(define 61 (add1 60))
(define 62 (add1 61))
(define 63 (add1 62))
(define 64 (add1 63))
(define 65 (add1 64))
(define 66 (add1 65))
(define 67 (add1 66))
(define 68 (add1 67))
(define 69 (add1 68))
(define 70 (add1 69))
(define 71 (add1 70))
(define 72 (add1 71))
(define 73 (add1 72))
(define 74 (add1 73))
(define 75 (add1 74))
(define 76 (add1 75))
(define 77 (add1 76))
(define 78 (add1 77))
(define 79 (add1 78))
(define 80 (add1 79))
(define 81 (add1 80))
(define 82 (add1 81))
(define 83 (add1 82))
(define 84 (add1 83))
(define 85 (add1 84))
(define 86 (add1 85))
(define 87 (add1 86))
(define 88 (add1 87))
(define 89 (add1 88))
(define 90 (add1 89))
(define 91 (add1 90))
(define 92 (add1 91))
(define 93 (add1 92))
(define 94 (add1 93))
(define 95 (add1 94))
(define 96 (add1 95))
(define 97 (add1 96))
(define 98 (add1 97))
(define 99 (add1 98))
(define 100 (add1 99))

(define sub1 (\ n f x (n (\ g h (h (g f))) (\ u x) (\ u u))))
(define + (\ m n (m add1 n)))
(define - (\ m n (n sub1 m)))
(define * (\ m n f (m (n f))))
(define ^ (\ b e (e b)))

(define true  (\ x y x))
(define false (\ x y y))

(define not (\ p (p false true)))
(define and (\ p q (p q p)))
(define or  (\ p q (p p q)))
(define if  (\ p a b (p a b)))

(define zero? (\ n (n (\ x false) true)))
(define <= (\ m n (zero? (- m n))))
(define num=? (\ m n (and (<= m n) (<= n m))))
(define < (\ m n (and (<= m n) (not (num=? m n)))))
(define > (\ m n (not (<= m n))))
(define >= (\ m n (or (> m n) (num=? m n))))

(define cons   (\ x y f (f x y)))
(define car    (\ p (p true)))
(define cdr    (\ p (p false)))
(define nil    (\ x true))
(define empty? (\ p (p (\ x y false))))
(define cons?  (\ p (not (empty? p))))

(define shift-and-inc (\ x (cons (cdr x) (add1 (cdr x)))))
(define sub1 (\ n (car (n shift-and-inc (cons 0 0)))))

(define I (\ x x))
(define K (\ x y x))
(define S (\ x y z (x z (y z))))
(define B (\ x y z (x (y z))))
(define C (\ x y z (x z y)))

(and (empty? nil)
     (or ((if (>= (sub1 1) 0)
              I
              not)
           true)
         (num=? 2 (car (cdr (cons 4 (cons 3 1)))))))
         ; should give true

;; PROBLEMATIC:
;(define W (\ x (\ y ((x y) y))))
;(define U (\ x (x x)))
;(define Y (\ g ((\ x (g (x x))) (\ x (g (x x))))))

;(define g (\ r n (if (zero? n)
;                     1
;                     (* n (r r (sub1 n))))))
;(define f (g g))
;(f 3)

;(+ 3 2)
